<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>let majiang = ["🀇","🀈","🀉","🀊","🀋","🀌","🀍","🀎","🀏","🀐","🀑","🀒","🀓","🀔","🀕","🀖","🀗","🀘","🀙","🀚","🀛","🀜","🀝","🀞","🀟","🀠","🀡","🀀","🀁","🀂","🀃","🀄","🀅","🀆"]

// 34种牌，每种牌有四张，共136张牌
// 三个相同的 或 三个连牌 （一组牌）
// 一对儿（两个相同的）
// 四组加一对儿 即 胡牌 总共14张牌

//生成34个数字
func genNumPai(numPai: Int)-&gt;[Int]{
    var numPais = [Int]()
    for _ in 0...3{
        for i in 0..&lt;numPai{
            numPais.append(i)
        }
    }
    return numPais
}
show("\(genNumPai(numPai: 34))")

//生成136个数字 一副牌的数字
func dealPai()-&gt;[Int]{
    var playerPais = [Int]()
    var numPais = genNumPai(numPai: 34)
    numPais.shuffle()
    playerPais = Array(numPais[0...13])
    return playerPais
}
//var playerNumPai = dealPai()
//playerNumPai.sort()
//show("\(dealPai())")

//找可能的数字对 pair
func getDuplicateNum(pai: [Int])-&gt;[Int]{
    var playerNumPai = pai
    playerNumPai.sort()
    var duplicateNum = [Int]()
    for i in 0..&lt;playerNumPai.count{
        for j in 0..&lt;i{
            if playerNumPai[j] == playerNumPai[i]{
                duplicateNum.append(playerNumPai[i])
//                print("\(duplicateNum)")
            }
        }
    }
    return duplicateNum
}

//去除玩家手上一副牌的数字对
func removePair(playerPai:[Int],Num: Int)-&gt;[Int]{
    var playerNumPai = playerPai
    for _ in 0...1{
        if let paiIndex = playerNumPai.firstIndex(of: Num) {
//            print("\(paiIndex)")
            playerNumPai.remove(at: paiIndex)
//            print("\(playerNumPai)")
        }
    } 
    return playerNumPai
}

//检查12张牌是否 三个相同的 或 三个连牌 （一组牌）
func check12(playerPai: [Int])-&gt;Bool{
    var groups : [[Int]] = Array(repeating: [], count: 4)
    
    for element in playerPai{
        if element/9 &lt; 1{
            groups[element/9].append(element)
        }else if element/9 &gt;= 1 &amp;&amp; element/9 &lt; 2{
            groups[element/9].append(element)
        }else if element/9 &gt;= 2 &amp;&amp; element/9 &lt; 3{
            groups[element/9].append(element)
        }else if element/9 &gt;= 3 &amp;&amp; element/9 &lt; 4{
            groups[element/9].append(element)
        }
    }
    let triples = [0,3,6,9,12]
    for group in groups{
        if !(triples.contains(group.count)){
            return false
        }
    }
    
    for i in 0..&lt;playerPai.count/3{
        var temp = [Int]()
        for j in 0...2{
            temp.append(playerPai[i*3+j])
        }
        if !(Set(temp).count == 1 || (temp.last!-temp.first! == 2 &amp;&amp; temp[1] - temp.first! == 1)){
            return false
        }
    }
    return true
}

func hu(pai: [Int])-&gt;Bool{
    var duplicates = getDuplicateNum(pai: pai)
    var drawnPai = pai
    drawnPai.sort()
    for duplicate in duplicates{
        let last12 = removePair(playerPai: drawnPai, Num: duplicate)
        if check12(playerPai: last12){
            return true
        }
    }
    return false
}

func showPai(pai: [Int])-&gt;String{
    var ps = ""
    for i in pai{
        ps = "\(ps) \(majiang[i])"
    }
    return ps
}




// 胡 🀇 🀇 🀇 🀈 🀈 🀈 🀉 🀉 🀉 🀊 🀊 🀊 🀋 🀋
// let tian = [0,1,1,1,2,2,2,3,3,3,4,4,0,0]
// 胡 🀇 🀇 🀇 🀈 🀉 🀊 🀊 🀊 🀋 🀋 🀋 🀌 🀌 🀌
// let tian = [0,0,4,4,4,5,5,5,0,1,2,3,3,3]
// 不胡 🀇 🀈 🀉 🀊 🀋 🀌 🀍 🀎 🀏 🀐 🀐 🀑 🀒 🀒
// let tian = [0,1,2,3,4,5,6,7,8,8,9,10,11,11]
// 胡 🀇 🀈 🀉 🀈 🀉 🀊 🀊 🀋 🀌 🀋 🀌 🀍 🀋 🀋
// let tian = [0,1,2,1,2,3,3,4,5,4,5,6,4,4]
//let tian = [0,1,1,2,2,3,3,4,4,4,5,5,6,6]
//
//print(showPai(pai: [0,1,1,1,2,2,2,3,3,3,4,4,0,0]))
//print(hu(pai: [0,1,1,1,2,2,2,3,3,3,4,4,0,0]))
//
print(showPai(pai: [0,0,4,4,4,5,5,5,0,1,2,3,3,3]))
print(hu(pai: [0,0,4,4,4,5,5,5,0,1,2,3,3,3]))
</string>
			<key>ModifiedRange</key>
			<string>{265, 3554}</string>
			<key>OriginalContent</key>
			<string>show("/*#-localizable-zone(whatIsYourNameText)*/What’s your name?/*#-end-localizable-zone*/")

let name = ask("/*#-localizable-zone(nameText)*/Name/*#-end-localizable-zone*/")

show("/*#-localizable-zone(hiText)*/Hi /*#-end-localizable-zone*/" + name)
</string>
			<key>OriginalRange</key>
			<string>{265, 252}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Answers.playgroundchapter/Pages/Text.playgroundpage/main.swift</string>
</dict>
</plist>
